pipeline {
  agent any

  options {
    disableConcurrentBuilds()
    timeout(time: 5, unit: 'MINUTES')
  }

  environment {
    NODE_ENV = "production"
    dockerImage = ''
    registry = 'eeba19/cicd-frontend'
    AWS_ACCESS_KEY_ID = credentials('aws-access-key-id')
    AWS_SECRET_ACCESS_KEY = credentials('aws-secret-access-key')
    AWS_REGION = 'us-east-1'  // Replace with your AWS region
    ECS_CLUSTER = 'your-ecs-cluster-name'
    ECS_SERVICE = 'your-ecs-service-name'
  }

  stages {
    stage('SCM') {
      steps {
        checkout scm
      }
    }
    stage('Linting') {
      steps {
        script {
          def scannerHome = tool 'Sonarqube';
          withSonarQubeEnv() {
            sh "${scannerHome}/bin/sonar-scanner"
          }
        }
      }
    }
    stage('Testing') {
      steps {
        script {
          echo 'A/B Testing Stage'
        }
      }
    }
    stage('Build Docker Image') {
      steps {
        script {
          dockerImage = docker.build registry
        }
      }
    }
    stage('Push Docker Image') {
      steps {
        script {
          docker.withRegistry('https://registry.hub.docker.com', 'docker_hub') {
            dockerImage.push("${env.BUILD_NUMBER}")
            dockerImage.push("latest")
          }
        }
      }
    }
    stage('Deploy App to ECS') {
      steps {
        script {
          def awsCli = tool 'AWS-CLI'
          withCredentials([[
              $class: 'AmazonWebServicesCredentialsBinding',
              accessKeyVariable: 'AWS_ACCESS_KEY_ID',
              credentialsId: 'aws-access-key-id',
              secretKeyVariable: 'AWS_SECRET_ACCESS_KEY'
          ]]) {
            sh """
              \$(aws ecr get-login --no-include-email --region ${env.AWS_REGION})
              aws ecs update-service --cluster ${env.ECS_CLUSTER} --service ${env.ECS_SERVICE} --force-new-deployment
            """
          }
        }
      }
    }
  }
}
