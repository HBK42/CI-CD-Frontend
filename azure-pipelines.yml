trigger:
  branches:
    include:
      - main

pool:
  vmImage: 'ubuntu-latest'

variables:
  - group: docker-credentials  # Stelle sicher, dass deine Variablen Gruppe korrekt geladen wird

jobs:
- job: build_and_deploy
  displayName: 'Build and Deploy'
  timeoutInMinutes: 60  # Erhöhe das Timeout auf 60 Minuten, falls die Pipeline länger dauert

  steps:
    - checkout: self
      displayName: 'Checkout repository'

    - script: |
        echo 'Running SonarQube analysis...'
        # Hier können Befehle für die statische Code-Analyse oder SonarQube ausgeführt werden
      displayName: 'SonarQube Analysis'
      env:
        SONARQUBE_TOKEN: $(SONARQUBE_TOKEN)  # Beispiel für die Verwendung einer Variable aus der Gruppe

    - script: |
        echo 'Running tests...'
        # Hier können deine Testbefehle ausgeführt werden
      displayName: 'Run Tests'

    - script: |
        echo 'Building Docker image...'
        docker build -t $(registry) .
      displayName: 'Build Docker Image'
      env:
        registry: $(registry)  # Beispiel für die Verwendung einer Variablen aus der Gruppe

    - script: |
        echo 'Logging in to Docker Hub...'
        echo $(DOCKER_PASSWORD) | docker login -u $(DOCKER_USERNAME) --password-stdin
        echo 'Tagging and pushing Docker image...'
        docker tag $(registry) $(DOCKER_REGISTRY)/$(registry)
        docker push $(DOCKER_REGISTRY)/$(registry)
      displayName: 'Push Docker Image to Docker Hub'
      env:
        DOCKER_REGISTRY: $(DOCKER_REGISTRY)
        DOCKER_USERNAME: $(DOCKER_USERNAME)
        DOCKER_PASSWORD: $(DOCKER_PASSWORD)

    - script: |
        echo 'Deploying app...'
        # Hier können die Befehle für die Bereitstellung der Anwendung ausgeführt werden
      displayName: 'Deploy App'
